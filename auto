-- Use the globally available AutoShoot table
local AutoShoot = _G.AutoShoot

-- Default values if they aren't already set globally
AutoShoot['Enabled'] = AutoShoot['Enabled'] or false
AutoShoot['Key'] = AutoShoot['Key'] or Enum.KeyCode.C
AutoShoot['Delay'] = AutoShoot['Delay'] or 0.05
AutoShoot['NOTIF'] = AutoShoot['NOTIF'] or true

-- Function to get the currently held tool
local function getHeldTool()
    local character = game.Players.LocalPlayer.Character
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") then
                return tool
            end
        end
    end
    return nil
end

-- AutoShoot toggle logic
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == AutoShoot.Key then
        AutoShoot.Enabled = not AutoShoot.Enabled

        -- Notification when toggling
        if AutoShoot.NOTIF then
            local status = AutoShoot.Enabled and "Enabled" or "Disabled"
            game.StarterGui:SetCore("SendNotification", {
                Title = "Auto Shoot",
                Text = status,
                Duration = 2,
            })
        end
    end
end)

-- Main AutoShoot logic
task.spawn(function()
    while true do
        task.wait(0.1)  -- Main loop
        if AutoShoot.Enabled then
            local Tool = getHeldTool()  -- Check the currently held tool
            if Tool then
                Tool:Activate()  -- Activate the tool (shoots)
                task.wait(AutoShoot.Delay)  -- Precise delay between shots
            end
        end
    end
end)
