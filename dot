-- Function to smoothly transition between rainbow colors
function getRainbowColor(tick)
    local hue = tick % 1
    return Color3.fromHSV(hue, 1, 1)
end

-- Function for pulsating effect with smooth transitions and larger sizes
function applyPulsate(dot)
    if DotCustomization.Effects.Pulsate then
        spawn(function()
            while DotCustomization.Effects.Pulsate do
                local initialSize = 1
                local targetSize = math.random(120, 200) / 100 -- Random target size between 1.2 and 2.0
                local duration = 0.1 -- Shorter duration for a much faster transition
                local steps = 30 -- Number of steps for smoothness

                -- Smoothly increase size
                for i = 0, steps do
                    local alpha = i / steps -- Calculate the alpha for interpolation
                    local newSize = initialSize + (targetSize - initialSize) * alpha
                    dot.Size = UDim2.new(newSize, 0, newSize, 0)
                    wait(duration / steps)
                end

                -- Smoothly decrease size back to original
                for i = 0, steps do
                    local alpha = i / steps
                    dot.Size = UDim2.new(targetSize - (targetSize - initialSize) * alpha, 0, targetSize - (targetSize - initialSize) * alpha, 0)
                    wait(duration / steps)
                end
            end
        end)
    end
end

-- Original Script Starts
local SelectedPart = "HumanoidRootPart" -- Default SelectedPart for the dot lock
local CC = game:GetService("Workspace").CurrentCamera
local Plr
local enabled = false
local accommodationFactor = 0.12348
local mouse = game.Players.LocalPlayer:GetMouse()
local placemarker = Instance.new("Part", game.Workspace)

-- Updated makemarker function to include new customization options
function makemarker(Parent, Adornee, Color, Size, Size2)
    local e = Instance.new("BillboardGui", Parent)
    e.Name = "PP"
    e.Adornee = Adornee
    e.Size = UDim2.new(Size * DotCustomization.DotSize, Size2, Size * DotCustomization.DotSize, Size2)
    e.AlwaysOnTop = Dotlock.DOT

    local a = Instance.new("Frame", e)
    a.Size = UDim2.new(1, 0, 1, 0)
    a.BackgroundTransparency = 1

    -- Apply shape based on customization
    if DotCustomization.Shape == "Circle" then
        local uicorner = Instance.new("UICorner", a)
        uicorner.CornerRadius = UDim.new(1, 0)
    elseif DotCustomization.Shape == "Square" then
        -- No UICorner applied, so it remains a square
    elseif DotCustomization.Shape == "Skull" then
        local skull = Instance.new("ImageLabel", a)
        skull.Image = "http://www.roblox.com/asset/?id=8850953349" -- Skull shape asset
        skull.Size = UDim2.new(1, 0, 1, 0)
        skull.BackgroundTransparency = 1
        return skull
    end

    -- Create the outline
    local outline = Instance.new("UIStroke", a)
    if DotCustomization.Effects.Rainbow then
        spawn(function()
            while DotCustomization.Effects.Rainbow do
                outline.Color = getRainbowColor(tick())
                wait(0.1)
            end
        end)
    else
        outline.Color = DotCustomization.DotColor
    end

    outline.Thickness = DotCustomization.OutlineThickness
    outline.Transparency = DotCustomization.Transparency

    -- Apply Pulsating Effect
    applyPulsate(a)  -- Ensure you're applying this to the Frame

    return e
end

local data = game.Players:GetPlayers()
function noob(player)
    local character
    repeat wait() until player.Character
    local handler = makemarker(guimain, player.Character:WaitForChild(SelectedPart), Color3.fromRGB(68, 214, 44), 0.6, 3)
    handler.Name = player.Name
    player.CharacterAdded:connect(function(Char) handler.Adornee = Char:WaitForChild(SelectedPart) end)

    spawn(function()                                    
        while wait() do
            if player and player.Character then
                -- Additional code can go here
            end                                    
        end                                     
    end)                                    
end                                    

for i = 1, #data do
    if data[i] ~= game.Players.LocalPlayer then
        noob(data[i])
    end
end

game.Players.PlayerAdded:connect(function(Player)
    noob(Player)
end)

spawn(function()
    placemarker.Anchored = true
    placemarker.CanCollide = false
    if Dotlock.DOT == true then
        placemarker.Size = Vector3.new(6, 6, 6)
    else
        placemarker.Size = Vector3.new(0, 0, 0)
    end
    placemarker.Transparency = 1
    if Dotlock.DOT then
        makemarker(placemarker, placemarker, Color3.fromRGB(68, 214, 44), 0.6, 0)
    end
end)

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(k)
    if k == Dotlock.Key and Dotlock.Enabled then
        if enabled == true then
            enabled = false
            Plr = nil -- Clear the player target when unlocked
            if Dotlock.NOTIF == true then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Vnly Ware",
                    Text = "Unlocked Dot Lock",
                    Icon = "http://www.roblox.com/asset/?id=8850953349",
                    Duration = 1,
                })
            end
        else
            Plr = getClosestPlayerToCursor()
            enabled = true
            if Plr and Dotlock.NOTIF == true then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Vnly Ware",
                    Text = "Locked on: " .. tostring(Plr.Name), 
                    Icon = "http://www.roblox.com/asset/?id=8850953349",
                    Duration = 1,
                })
            end
        end
    end
end)

function getClosestPlayerToCursor()
    local closestPlayer
    local shortestDistance = 9999  -- High initial value for shortest distance

    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end

game:GetService("RunService").Stepped:connect(function()
    if enabled and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position + (Plr.Character.HumanoidRootPart.Velocity * accommodationFactor))
        
        -- Update mouse position to the dot using UpdateMousePosI
        local updateMousePosEvent = game.ReplicatedStorage:FindFirstChild("UpdateMousePosI2")
        if updateMousePosEvent then
            updateMousePosEvent:FireServer(placemarker.Position)
        end
    else
        placemarker.CFrame = CFrame.new(0, 9999, 0) -- Reset placemarker when not locked
    end
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if Dotlock.Enabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePosI2" then
        -- Only update mouse position if there's a locked player
        if Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
            args[3] = Plr.Character.HumanoidRootPart.Position + (Plr.Character.HumanoidRootPart.Velocity * accommodationFactor)
        end
        return old(unpack(args))
    end
    return old(...)
end)

if Dotlock.AIRSHOT then
    Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
        if new == Enum.HumanoidStateType.Freefall then
            Dotlock.Part = "RightFoot"
        else
            Dotlock.Part = "LowerTorso"
        end
    end)
end
